import java.util.Arrays;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Stack;

public class HumanToHuman {
	static Stack<Integer> firstplayerPositions = new Stack<Integer>();
	static Stack<Integer> secondplayerPositions = new Stack<Integer>();
	//static Stack<Integer> cpuPositions = new Stack<Integer>();
	public static void main(String args[])
	{
		char[][] gameBoard = {
		{' ', '|', ' ', '|', ' '},
		{'-', '+', '-', '+', '-'},
		{' ', '|', ' ', '|', ' '},
		{'-', '+', '-', '+', '-'},
		{' ', '|', ' ', '|', ' '}
		};
		Scanner scan = new Scanner(System.in);
		System.out.println("If Player-1 wants to play first , enter 0 otherwise enter 1");
		int result = scan.nextInt();
		if (result == 0)
		{
			playgame1(gameBoard);
		}
		else
		{
			playgame2(gameBoard);
		}
		
		
	}
	public static void playgame1(char[][] gameBoard)
	{
		while(true)
		{
			
			userplaying(gameBoard , "player1");
			if (winningGameValue() == -1)
			{
				System.out.println("Congratulations!! Player-1 won the game !");

				break;
			}
			else if (winningGameValue() == 0)
			{
				System.out.println("Its a tie");
				break;
			}
			userplaying(gameBoard , "player2");
			
			//printgameBoard(gameBoard);
			if (winningGameValue() == 1)
			{
				System.out.println("Congratulations!! Player-2 won the game !");
				break;
			}
			else if (winningGameValue() == 0)
			{
				System.out.println("Its a tie. ");
				break;
			}
			
		}
	}
	public static void playgame2(char[][] gameBoard)
	{
		while(true)
		{
			userplaying(gameBoard , "player2");
			
			//printgameBoard(gameBoard);
			if (winningGameValue() == 1)
			{
				System.out.println("Congratulations!! Player-2 won the game !");
				break;
			}
			else if (winningGameValue() == 0)
			{
				System.out.println("Its a tie");
				break;
			}
			
			userplaying(gameBoard , "player1");
			if (winningGameValue() == -1)
			{
				System.out.println("Congratulations!! Player-1 won the game !");

				break;
			}
			else if (winningGameValue() == 0)
			{
				System.out.println("Its a tie");
				break;
			}
			
			
		}
	}
	public static void userplaying(char[][] gameBoard, String user) 
	{
		Scanner scan = new Scanner(System.in);
		if (user.equals("player1"))
		{
			System.out.println("Player-1 Enter your postion from 1:9 - ");
		}
		else if (user.equals("player2"))
		{
			System.out.println("PLayer-2 Enter your postion from 1:9 - ");
		}
		int playerPos = scan.nextInt();
		while (firstplayerPositions.contains(playerPos) || secondplayerPositions.contains(playerPos))// better way is create a list and store all // the remaining positions in it and then choose random value from this list. 
		{
			System.out.println("Position is already filled .Please enter again");
			playerPos = scan.nextInt();
		}
		if (user.equals("player1"))
		{
			placePiece(gameBoard, playerPos, "player1");
		}
		else if (user.equals("player2"))
		{
			placePiece(gameBoard, playerPos, "player2");
		}
		printgameBoard(gameBoard);
		System.out.println();
	}
	
	
	

	public static void printgameBoard(char[][] gameBoard)
	{
		for (char[] row : gameBoard)
		{
			for (char c : row)
			{
				System.out.print(c);
			}
			System.out.println();
		}
	}
	
	public static void placePiece(char[][] gameBoard, int pos, String user)
	{
		char symbol = 'X';
		if (user.equals("player1"))
		{
			firstplayerPositions.add(pos);
			symbol = 'X';
		}
		else if (user.equals("player2"))
		{
			secondplayerPositions.add(pos);
			symbol = '0';
		}
		
		if (pos == 1 || pos == 2 || pos ==3)
		{
			gameBoard[0][2 * (pos-1)] = symbol;
		}
		else if (pos == 4 || pos ==5 || pos ==6)
		{
			gameBoard[2][2 * pos - 8] = symbol;
		}
		else if (pos == 7 || pos ==8 || pos ==9)
		{
			gameBoard[4][2 * pos -14] = symbol;
		}
				
	}
  
 
	public static int winningGameValue()
	{
		
		
			if (firstplayerPositions.containsAll(Arrays.asList(1,2,3)) ||  firstplayerPositions.containsAll(Arrays.asList(4,5,6))  || 
					firstplayerPositions.containsAll(Arrays.asList(7,8,9)) ||  firstplayerPositions.containsAll(Arrays.asList(1,4,7))  ||
					firstplayerPositions.containsAll(Arrays.asList(2,5,8)) ||  firstplayerPositions.containsAll(Arrays.asList(3,6,9))  ||
					firstplayerPositions.containsAll(Arrays.asList(1,5,9)) ||  firstplayerPositions.containsAll(Arrays.asList(3,5,7)))
				{
										return -1;
				}
		
		
		
			else if (secondplayerPositions.containsAll(Arrays.asList(1,2,3)) ||  secondplayerPositions.containsAll(Arrays.asList(4,5,6))  || 
					secondplayerPositions.containsAll(Arrays.asList(7,8,9)) ||  secondplayerPositions.containsAll(Arrays.asList(1,4,7))  ||
					secondplayerPositions.containsAll(Arrays.asList(2,5,8)) ||  secondplayerPositions.containsAll(Arrays.asList(3,6,9))  ||
					secondplayerPositions.containsAll(Arrays.asList(1,5,9)) ||  secondplayerPositions.containsAll(Arrays.asList(3,5,7)))
				{
					
					return 1;
				}
		
			else if (firstplayerPositions.size() + secondplayerPositions.size() == 9)
		
		         return 0;
			
		
		return 5;
	}
	
	

}
